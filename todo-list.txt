User Stories / Usecases:
   - User can create a knock-out tournament with configurable number of rounds and start datetime
   - User can get list of all tournaments (id, name, number of rounds, start_datetime, tournament_status)
   - User can subscribe to a tournament which is not yet started
   - User can play matches once the tournament is started
       - User will submit his score in the match
   - User will progress to next round if he wins the match
   - User can get his current round number for a tournament
   - User can get his opponent user profile in any round in a tournament
   - User can get the winner user profile of any tournament
   
Raise Appropriate custom exceptions wherever necessary

Assumptions:
   - Tournament will always be full before start time
   - All players will play all their matches
   - In case of tie, Whoever submits the score first is winner
   - User profile has Name, Age, Gender
   - tournament_status - CAN_JOIN, FULL_YET_TO_START, IN_PROGRESS, COMPLETED.

Common Ground:
    We do not differentiate between 'Entities' and 'Usecases'
    We start development with Usecases

    We need abstractions for database, presenter.
        We are separating database, presenter coupling from usecases
        This allows TDD to be simpler for usecases

TodoList:
    User can play matches once the tournament is started
        Creates matches in tournament
            2**n-1 matches
            Each match two players
            Each player should have only 1 match

Completed TodoList:
    User can create a knock-out tournament with configurable number of rounds and start datetime
        no of rounds should be >= 3
        start datetime should not be less than current datetime
