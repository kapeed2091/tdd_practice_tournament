Usecases: Total time: 13 hrs + 1 hr
   - User can create a knock-out tournament with configurable number of rounds and start datetime - 2: 30 hrs
   - User can get list of all tournaments (id, name, number of rounds, start_datetime, tournament_status) - 1 hr + 1 hr
   - User can subscribe to a tournament which is not yet started - 1: 30 hrs
   - User can play matches once the tournament is started - 3: 00 hrs
       - User will submit his score in the match
   - User will progress to next round if he wins the match
   - User can get his current round number for a tournament - 1 hr
   - User can get his opponent user profile in any round in a tournament - 1 hr
   - User can get the winner user profile of any tournament - 1 hr 30 mins
   
Raise Appropriate custom exceptions wherever necessary

Assumptions:
   - Tournament will always be full before start time
   - All players will play all their matches
   - In case of tie, Whoever submits the score first is winner
   - User profile has Name, Age, Gender
   - tournament_status - CAN_JOIN, FULL_YET_TO_START, IN_PROGRESS, COMPLETED.

   Business Assumptions:
       - updating tournament status to IN_PROGRESS once the tournament is started
       - tournament status should be FULL_YET_TO_START before starting tournament
       - assuming there will be two members per match
       - assuming that a match can be played only once by user
       - match player has three states: YET_TO_START, IN_PROGRESS, COMPLETED
            - YET_TO_START state when it is created initially
            - IN_PROGRESS, once the player starts playing the match
            - COMPLETED, once the player submits his score
       - assuming that initial score is 0
       - winner will be computed only when both the players submits their score
       - assuming match winner is None by default
       - assuming completed_datetime is None by default
       - assuming that winner of the last round of tournament is
       the tournament winner
       - tournament winner is None by default
       - all the players subscribing to tournament will be in Round: 1 by default

Doubts:
    Technical Doubts:
        - what to do with the test case(use case is ALREADY implemented while
        implementing other use case) which directly goes to GREEN state(
        refer: player can submit only if he is part of match)

        - what to do with the test case(use case is NOT implemented but due to randomization/default ordering of django
        use case covered) which directly goes to GREEN state(
        refer: add players to first round tournament matches)

        - progress to next round if it is last round, check the commit and migrations done --> is that correct procedure?

        - how to get to red state(get_current_round_by_user --> when user not in tournament)

        - update_tournament_winner --> Did I do it in correct order?

TODOs(To be Implemented list):
    - get opponent profile in round of a tournament
        - user is not the part of round
    - get winner profile of tournament

    LOW PRIORITY:
        - play match
            - validate tournament_match_id, raise appropriate custom exception
            - validate player_id, raise appropriate custom exception
    
In Progress List:
    - get opponent profile in round of a tournament
        - get opponent profile in round

Completed List:
    - create user
        - create user with username 
        - no two users can have same username
        - add name, age, gender fields to user
    - user can create tournament with configurable number of rounds and start datetime
        - create tournament 
        - create tournament with invalid datetime(yesterday's date) 
        - create tournament with rounds non positive 
        - create tournament by user 
        - invalid user_id while create tournament
        - refactor testcases --> don't use internal functions 
        - remove create_tournament (incorrect implementation) 
    - user can get all tournaments
        - get tournaments having tournaments in all states 
        - get tournaments with ordering according to status order:[
        FULL_YET_TO_START, CAN_JOIN, IN_PROGRESS, COMPLETED] and start_datetime 
        - get tournaments with offset and limit -- NOT LISTED IN USECASE
        - refactor testcases --> don't use internal functions 
        - get all tournaments by user 
        - invalid user_id in get all tournaments 
        - remove get_all_tournaments(incorrect implementation) 
    - user can subscribe to tournament
        - user subscribing to tournament 
        - user can only subscribe to CAN_JOIN tournaments 
        - requested user should be valid user 
        - subscribed player can't subscribe again 
        - subscribing to invalid tournament_id
        - tournament_status should change to FULL_YET_TO_START if max users subscribed 
        - refactor testcases --> don't use internal functions
    - start tournament
        - update status to IN_PROGRESS
        - starting tournament before start_datetime reaches
        - tournament status should be FULL_YET_TO_START before starting tournament
    - create matches
        - create matches for tournament
        - create round wise matches
    - add players to matches
        - create match players
        - add players to round 1 only
    - play match
        - match player status changes to IN_PROGRESS
        - user can play match only if his status is at YET_TO_START
        - player is not in given tournament match
    - player submits match score
        - player submits score
        - status changes to COMPLETED
        - player can submit only if his status is IN_PROGRESS
        # TODO: Doubt: How to handle this
        - player can submit only if he is part of match --> ALREADY HANDLED
        - declare match winner when second player submits score
        - In case of tie, Whoever submits the score first is winner
    - match winner progress to next round
        - winner progress to next round
        - if next round is last round
        - Refactor promote_winner_to_next_round
        - progress match winner to next round
        - update player current round
    - update tournament winner
        - update tournament winner
        - all the matches aren't completed -- # as mentioned in assumption that
        all players plays all their matches, no need to cover this use case
    - user can get his current round
        - user can get his current round
        - user requests for tournament which he is not part of
