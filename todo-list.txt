Usecases:

Yet to do:
   - User can subscribe to a tournament which is not yet started
        - How to handle concurrency during subscribing?
   - User can play matches once the tournament is started
        - Tournament should exist
        - User can play match once current time is greater than tournament start_datetime
        - User can play tournament only if tournament status is IN_PROGRESS
        - User should have a match to play in that round
   - Create matches once tournament starts
        - *Both users should be registered with us
        - Both users should be subscribed to tournament
        - Only one match will be created for a tournament round for a user
   - Tournament status should be in IN_PROGRESS, after match creation
   - User will submit his score in the match
   - User will progress to next round if he wins the match
   - User can get his current round number for a tournament
   - User can get his opponent user profile in any round in a tournament
   - User can get the winner user profile of any tournament

Completed:
   - User can create a knock-out tournament with configurable number of rounds and start datetime
        - Number of rounds should be non-negative integer
        - Number of rounds should be int type
        - Start datetime must be greater than now
        - User should be registered with us to create a tournament
        - Tournament id (t_id) should be unique
        - Tournament status should be CAN_JOIN when created
   - User can get list of all tournaments (id, name, number of rounds, start_datetime, tournament_status)
        - Should return empty list if no tournaments
        - User should be registered
   - User can subscribe to a tournament which is not yet started
        - Cannot subscribe if user is not registered
        - Cannot subscribe if tournament doesn't exist
        - Cannot subscribe if tournament has started or completed
        - Cannot subscribe if tournament is full
        - For a Tournament, User can subscribe only once
        - After user joins, if tournament capacity is full, should change state from CAN_JOIN to FULL_YET_TO_START
   - Create matches once tournament starts
        - create tournament match with two users
        - create match only if current time is greater than tournament start_datetime
        - Tournament should exist

Raise Appropriate custom exceptions wherever necessary

Assumptions:
   - Tournament will always be full before start time
   - All players will play all their matches
   - In case of tie, Whoever submits the score first is winner
   - User profile has Name, Age, Gender
   - tournament_status - CAN_JOIN, FULL_YET_TO_START, IN_PROGRESS, COMPLETED.

My Assumptions:
   - Tournament name length is less than 30
   - Changed id field in tournament to t_id with max length 20
   - default status of tournament is CAN_JOIN
   - Userprofile has extra field - user_id which is unique
   - user_id max length is 20
   - Immediately after creating tournament, we are updating status to CAN_JOIN (No specific time when the subscription begins)
   - User who creates tournament will not be directly subscribed to tournament
   - Upon last slot subscription, we change tournament status to FULL_YET_TO_START
   - Currently match will be between 2 players not 2 teams
   - Creation of all matches of a round will happen at once and only once
   - Creation of tournament matches is done in a new model with RDS
   - Added vernacular exception messages

My Doubts:
   - User can play match only once in a round?
   -

Time estimate:
   - Hrs - 2, 0.5, 1, 2, 2, 1, 0.5, 1, buffer 3
