- User can create a knock-out tournament with configurable number of rounds and start datetime
      1. User Can create a tournament with configurable number of rounds and start datetime
      2. When User creates a tournament with non-positive number of rounds, throw an exception
      3. When User creates a tournament with date_time <= now, should throw an exception
      4. When User Create a tournament with wrong user_id, should throw an exception
      5. Encapsulation of methods
      6. Refactor: Wrong Name for user_id_length in Tournament model
- User can get list of all tournaments (id, name, number of rounds, start_datetime, tournament_status)
      1. User can all the tournaments
      2. Should we validate user_id??
- User can subscribe to a tournament which is not yet started
      1. User can subscribe to a tournament
      2. If User try to subscribe to tournament which has started, throw an exception
      [3. If User try to subscribe to tournament which has reached max members, throw an exception]
      4. If User try to subscribe to the which he already subscribed to, throw an exception
      5. Invalid user_id
      6. Invalid tournament_id
- User can play matches once the tournament is started
     - User will submit his score in the match
- User will progress to next round if he wins the match
- User can get his current round number for a tournament
- User can get his opponent user profile in any round in a tournament
- User can get the winner user profile of any tournament

Additional TODO's
- If we include status, how should the field get_updated?
- Should make tournament_name mandatory for 1st use-case
